{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the project repository with Flutter and stacked-cli.",
        "details": "Create a new Flutter project using the latest stable version. Set up the project structure using stacked-cli to ensure a clean architecture. Initialize version control with Git and create a remote repository on GitHub for collaboration.",
        "testStrategy": "Verify that the project builds successfully and the initial setup runs without errors.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Home Screen UI",
        "description": "Develop the home screen UI with emotion summary and recent video list.",
        "details": "Use Flutter to create a responsive home screen. Implement reusable components for emotion statistics and video list. Ensure the UI follows the design guidelines and integrates with the stacked ViewModel for state management.",
        "testStrategy": "Test the UI on multiple devices to ensure responsiveness and check that the components render correctly.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Video Upload Feature",
        "description": "Create the video recording and emotion analysis functionality using real-time camera streaming.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Implement real-time video recording using the camera package for live streaming. Manage camera permissions with permission_handler. Perform real-time emotion analysis using Azure Face API during recording. Display live emotion results during recording and summarize results after completion.",
        "testStrategy": "Test real-time video recording and emotion analysis on different devices. Verify that live emotion results are displayed correctly during recording and that final results are accurate.",
        "subtasks": [
          {
            "id": 1,
            "title": "Manage Camera Permissions and Initialization",
            "description": "Set up and manage camera permissions using the permission_handler package.",
            "dependencies": [],
            "details": "Implement permission checks and request camera access from the user.",
            "status": "done",
            "testStrategy": "Verify that camera permissions are requested and granted correctly on various devices."
          },
          {
            "id": 2,
            "title": "Process Real-Time Camera Stream",
            "description": "Implement real-time video recording using the camera package.",
            "dependencies": [
              "3.1"
            ],
            "details": "Set up the camera package to handle live streaming and recording of video.",
            "status": "done",
            "testStrategy": "Test video recording functionality across different devices to ensure smooth streaming."
          },
          {
            "id": 3,
            "title": "Integrate Real-Time Emotion Analysis API",
            "description": "Connect and use Azure Face API for real-time emotion analysis during video recording.",
            "dependencies": [
              "3.2"
            ],
            "details": "Implement API calls to Azure Face API to analyze emotions in real-time.",
            "status": "done",
            "testStrategy": "Verify that emotion data is accurately captured and processed during recording."
          },
          {
            "id": 4,
            "title": "Update UI in Real-Time During Recording",
            "description": "Display live emotion results on the UI during video recording.",
            "dependencies": [
              "3.3"
            ],
            "details": "Develop UI components to show real-time emotion analysis results to the user.",
            "status": "done",
            "testStrategy": "Ensure that the UI updates correctly and displays emotion data without lag."
          },
          {
            "id": 5,
            "title": "Save Results After Recording Completion",
            "description": "Store video and emotion analysis results after recording is finished.",
            "dependencies": [
              "3.4"
            ],
            "details": "Implement functionality to save video files and emotion data securely.",
            "status": "done",
            "testStrategy": "Test that all data is saved correctly and can be retrieved for later use."
          },
          {
            "id": 6,
            "title": "Implement Error Handling and User Feedback",
            "description": "Develop error handling mechanisms and provide feedback to users.",
            "dependencies": [],
            "details": "Create error handling routines and user notifications for any issues during recording.",
            "status": "done",
            "testStrategy": "Simulate errors and verify that appropriate feedback is given to the user."
          }
        ]
      },
      {
        "id": 4,
        "title": "Integrate Emotion Analysis API",
        "description": "Connect the app to the Microsoft Azure Face API for emotion analysis.",
        "details": "Set up API calls to Microsoft Azure Face API using HTTP requests. Handle authentication and error responses. Parse the emotion analysis results and update the UI accordingly.",
        "testStrategy": "Mock API responses to test the integration and ensure the app handles different scenarios like network errors.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Video Detail View",
        "description": "Develop the video detail view to display video playback and emotion analysis results.",
        "details": "Create a detailed view for video playback using Flutter's video_player package. Display emotion analysis results and allow users to add or edit tags. Implement sharing functionality using Firebase Dynamic Links.",
        "testStrategy": "Test video playback and ensure emotion results are displayed. Verify that sharing links are generated correctly.",
        "priority": "medium",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Design Emotion Diary UI",
        "description": "Create the emotion diary interface with a calendar view and daily emotion emojis.",
        "details": "Use Flutter's calendar packages to implement a calendar view. Display emotion emojis for each day based on the analysis results. Ensure the UI is intuitive and easy to navigate.",
        "testStrategy": "Test the calendar navigation and emoji display for accuracy and responsiveness.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Calendar Package and Implement Basic Calendar View",
            "description": "Integrate a Flutter calendar package and create a basic calendar view for the emotion diary.",
            "dependencies": [],
            "details": "Research and select a suitable Flutter calendar package. Implement the basic calendar view to display dates.",
            "status": "done",
            "testStrategy": "Verify the calendar displays correctly and is responsive across different devices."
          },
          {
            "id": 2,
            "title": "Implement Daily Emotion Data Model and Service",
            "description": "Create a data model and service to handle daily emotion data for the diary.",
            "dependencies": [
              "6.1"
            ],
            "details": "Design a data model to store daily emotions and implement a service to manage data retrieval and storage.",
            "status": "done",
            "testStrategy": "Test data retrieval and storage functionality to ensure accuracy and reliability."
          },
          {
            "id": 3,
            "title": "Develop Emotion Emoji Display and Visualization Widget",
            "description": "Create a widget to display emotion emojis for each day based on analysis results.",
            "dependencies": [
              "6.2"
            ],
            "details": "Design and implement a widget that visualizes emotion emojis on the calendar view.",
            "status": "done",
            "testStrategy": "Ensure emojis are displayed correctly for each day and update dynamically based on data changes."
          },
          {
            "id": 4,
            "title": "Create Emotion Statistics Chart and Summary Screen",
            "description": "Develop a screen to display emotion statistics and summaries using charts.",
            "dependencies": [
              "6.3"
            ],
            "details": "Implement charts to visualize emotion trends and summaries over time.",
            "status": "done",
            "testStrategy": "Test the accuracy and responsiveness of the charts and ensure they reflect the correct data."
          },
          {
            "id": 5,
            "title": "Set Up Navigation and Routing",
            "description": "Configure navigation and routing for the emotion diary UI.",
            "dependencies": [
              "6.4"
            ],
            "details": "Implement navigation logic to allow users to move between the calendar, statistics, and other screens.\n<info added on 2025-08-07T12:54:13.245Z>\nHero animation tag conflict issue has been resolved. In home_view.dart, two FloatingActionButtons were using the same default Hero tag, causing a conflict. Unique heroTags have been added to each button to resolve this:\n- Emotion Diary Button: heroTag: 'diary_fab'\n- Add Video Button: heroTag: 'add_video_fab'\n\nThis will prevent Hero animation conflict errors when navigating to the camera screen.\n</info added on 2025-08-07T12:54:13.245Z>\n<info added on 2025-08-07T12:56:57.786Z>\nImplemented a user-friendly camera permission dialog:\n\n1. Created `lib/ui/widgets/permission_dialog.dart` for an intuitive UI with a camera icon and description, offering \"Later\" and \"Allow Permission\" buttons.\n\n2. Enhanced camera service in `lib/services/camera_service.dart` by adding logic to check permission status (granted, denied, permanently denied) and integrating the permission request dialog. Added a dialog to redirect to settings if permission is denied.\n\n3. Modified `RecordingViewModel` and `RecordingView` to pass BuildContext for displaying the permission request dialog and improved the permission request flow during camera initialization.\n\nNow, when users enter the camera screen:\n- A friendly dialog is shown if permission is not granted.\n- Camera initialization proceeds upon permission approval.\n- An option to go to settings is provided if permission is denied.\n</info added on 2025-08-07T12:56:57.786Z>\n<info added on 2025-08-07T13:11:39.041Z>\nImplemented simulation mode for testing camera functionality on the iPhone simulator:\n\n1. **Simulator Detection and Automatic Mode Switching**:\n   - Detects `Platform.isIOS` environment.\n   - Automatically grants camera permissions in the simulator.\n   - Manages simulation state with an `isSimulatorMode` flag.\n\n2. **Simulation UI Implementation**:\n   - Displays a simulator mode screen instead of the camera preview.\n   - Includes a camera icon and \"Simulator Mode\" text.\n   - Provides a message indicating \"Simulation Recording Available\".\n\n3. **Simulation Recording Functionality**:\n   - Allows starting/stopping recording without a real camera.\n   - Simulates emotion analysis and timer operation.\n   - Saves recording results and navigates to the results screen.\n\nNow, the app can run on the iPhone simulator without camera permission errors, enabling testing of simulation recording and emotion analysis and storage functionalities.\n</info added on 2025-08-07T13:11:39.041Z>",
            "status": "in-progress",
            "testStrategy": "Verify that navigation is intuitive and routes are correctly set up between different UI components."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Family Sharing Feature",
        "description": "Develop the family sharing functionality with invitation and acceptance flows.",
        "details": "Use Firebase Dynamic Links to implement invitation links. Create UI for managing family members and setting sharing permissions. Ensure secure handling of user data and permissions.",
        "testStrategy": "Test the invitation flow and verify that family members can access shared content according to permissions.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Setup User Settings Screen",
        "description": "Develop the settings screen for user information and app preferences.",
        "details": "Create a settings UI to allow users to update their information, check cloud storage usage, and send feedback. Use Flutter's form widgets for input handling and validation.",
        "testStrategy": "Test form submissions and ensure data is updated correctly. Verify cloud storage usage displays accurately.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Cloud Storage Management",
        "description": "Integrate cloud storage management to track and display usage.",
        "details": "Use Supabase or Firebase for cloud storage management. Implement functionality to track storage usage and display it in the settings screen.",
        "testStrategy": "Test storage tracking and ensure the usage is updated and displayed correctly.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Develop Feedback Submission Feature",
        "description": "Create a feedback submission form for user feedback.",
        "details": "Implement a feedback form using Flutter's form widgets. Allow users to submit feedback which is sent to a designated email or stored in a database for review.",
        "testStrategy": "Test feedback submission and ensure it is received correctly.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Setup Authentication System",
        "description": "Implement user authentication using Supabase or Firebase Auth.",
        "details": "Set up user authentication with email/password and social login options. Ensure secure handling of user credentials and session management.",
        "testStrategy": "Test login and registration flows for different authentication methods. Verify session persistence and logout functionality.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Video Processing with FFmpeg",
        "description": "Set up video processing using FFmpeg for thumbnail extraction and frame capture.",
        "details": "Integrate FFmpeg to process uploaded videos for thumbnail extraction and frame capture. Ensure compatibility with different video formats.",
        "testStrategy": "Test video processing on various formats and verify that thumbnails and frames are extracted correctly.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Develop Notification System",
        "description": "Implement a notification system for app updates and family sharing alerts.",
        "details": "Use Firebase Cloud Messaging to send notifications for app updates and sharing alerts. Ensure notifications are handled correctly in the app.",
        "testStrategy": "Test notification delivery and handling on different devices and scenarios.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Optimize App Performance",
        "description": "Optimize the app for performance and responsiveness.",
        "details": "Profile the app using Flutter's performance tools. Optimize UI rendering and API calls to reduce latency and improve user experience.",
        "testStrategy": "Use performance profiling tools to identify bottlenecks and verify improvements.",
        "priority": "medium",
        "dependencies": [
          2,
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Conduct User Acceptance Testing",
        "description": "Perform user acceptance testing to ensure the app meets user needs and expectations.",
        "details": "Organize testing sessions with target users. Collect feedback and identify areas for improvement. Ensure the app is intuitive and meets all functional requirements.",
        "testStrategy": "Conduct structured testing sessions and gather user feedback to validate app functionality and usability.",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-06T07:33:50.160Z",
      "updated": "2025-08-07T05:36:53.504Z",
      "description": "Tasks for master context"
    }
  }
}